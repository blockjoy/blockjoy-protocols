name: Test Nodes

on:
  workflow_call:
    inputs:
      matrix:
        required: true
        type: string
        description: "JSON string containing the test matrix"
      version_tag:
        required: false
        type: string
        description: "Version tag for the container image"
      pr_number:
        required: true
        type: number
        description: "PR number"
      pr_sha:
        required: true
        type: string
        description: "PR SHA"
      event_action:
        required: true
        type: string
        description: "GitHub event action"
      pr_merged:
        required: false
        type: boolean
        default: false
        description: "Whether the PR was merged"
      pr_closed:
        required: false
        type: boolean
        default: false
        description: "Whether the PR was closed"
    outputs:
      status:
        description: "Workflow execution status"
        value: ${{ jobs.test-nodes.outputs.status }}
      node_names:
        description: "List of deployed node names"
        value: ${{ jobs.test-nodes.outputs.node_names }}
      runner_host:
        description: "Runner hostname where nodes are deployed"
        value: ${{ jobs.test-nodes.outputs.runner_host }}

permissions:
  contents: write
  packages: write
  statuses: write
  pull-requests: write

jobs:
  get-host:
    runs-on: dev
    outputs:
      target_host: ${{ steps.get-host.outputs.target_host }}
    steps:
      - name: Get previous host
        id: get-host
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ "${{ inputs.pr_closed }}" == "true" ]]; then
            echo "target_host=$(hostname)" >> $GITHUB_OUTPUT
          else
            PREV_HOST=$(gh pr view ${{ inputs.pr_number }} --json comments --jq '
              .comments
              | map(select(.author.login == "github-actions"))
              | map(select(.body | test("The following nodes have been deployed on")))
              | sort_by(.createdAt)
              | last
              | if . == null then "" else
                (.body | capture("The following nodes have been deployed on `(?<host>[^`]+)`:\\n").host)
                end
            ')
            if [ -z "$PREV_HOST" ]; then
              echo "No previous host found, using runner host"
              echo "target_host=${{ runner.name }}" >> $GITHUB_OUTPUT
            else
              echo "Found previous host: $PREV_HOST"
              echo "target_host=$PREV_HOST" >> $GITHUB_OUTPUT
            fi
          fi

  cleanup:
    needs: [get-host]
    runs-on: ${{ needs.get-host.outputs.target_host }}
    steps:
      - name: Cleanup nodes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Finding nodes to clean up..."
          
          # Find the latest cleanup comment timestamp
          LAST_CLEANUP=$(gh pr view ${{ inputs.pr_number }} --json comments --jq '
            .comments
            | map(select(.author.login == "github-actions"))
            | map(select(.body | test("All nodes were deployed successfully and cleaned up")))
            | sort_by(.createdAt)
            | last
            | if . == null then "" else .createdAt end
          ')
          
          echo "Last cleanup was at: $LAST_CLEANUP"
          
          # Get list of nodes from PR comments after last cleanup
          NODES=$(gh pr view ${{ inputs.pr_number }} --json comments | jq -r --arg last "$LAST_CLEANUP" '
            .comments
            | map(select(.author.login == "github-actions"))
            | map(select(.body | contains("following nodes have been deployed")))
            | map(select(
                if $last == "" then true
                else (.createdAt > $last)
                end
              ))
            | map(.body | split("\n") 
              | map(select(contains("running variant"))) 
              | map(capture("- `(?<n>[a-z-]+-[a-z-]+-[a-z-]+)`, running variant `[^`]+`").n)
              | join("\n")
            )
            | join("\n")
          ')
          
          if [ ! -z "$NODES" ]; then
            echo "Found nodes to clean up:"
            echo "$NODES"
            CLEANED_NODES=0
            while read -r node; do
              if [ -z "$node" ]; then 
                echo "Skipping empty node name"
                continue
              fi
              echo "Processing node: '$node'"
              if bv n delete -y "$node"; then
                CLEANED_NODES=$((CLEANED_NODES + 1))
              else
                echo "Warning: Failed to delete node '$node'"
              fi
            done <<< "$NODES"
          else
            echo "No nodes found to clean up, exiting cleanly"
          fi

  test-nodes:
    needs: [get-host, cleanup]
    if: inputs.pr_closed == false
    runs-on: ${{ needs.get-host.outputs.target_host }}
    environment: Dev
    permissions:
      contents: write
      pull-requests: write
    strategy:
      matrix: ${{ fromJson(inputs.matrix) }}
    outputs:
      runner_host: ${{ steps.test-nodes.outputs.runner_host }}
      node_names: ${{ steps.test-nodes.outputs.node_names }}
      status: ${{ steps.test-nodes.outputs.status }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
      - name: Setup NIB auth
        run: |
          echo '${{ secrets.NIB_AUTH }}' > ~/.nib.json
      - name: Create test babel file
        id: test-babel
        run: |
          # Copy babel.yaml to test file
          cp ${{ matrix.image_path }}/babel.yaml ${{ matrix.image_path }}/babel.yaml-test
          
          # Extract image name the same way as build-protocols
          IMAGE_NAME=$(echo "${{ matrix.image_path }}" | cut -d'/' -f3)
          
          # Update container_uri with newly built image using version from matrix
          NEW_URI="docker://ghcr.io/blockjoy/${IMAGE_NAME}:${{ matrix.version_tag }}"
          yq -i e ".container_uri = \"$NEW_URI\"" ${{ matrix.image_path }}/babel.yaml-test
          echo "new_uri=${NEW_URI}" >> $GITHUB_OUTPUT

      - name: Test nodes
        id: test-nodes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Store runner hostname
          RUNNER_HOST=$(hostname)
          echo "runner_host=${RUNNER_HOST}" >> $GITHUB_OUTPUT
          
          # Get variants from babel.yaml
          VARIANTS=$(yq e '.variants[].key' ${{ matrix.image_path }}/babel.yaml-test)
          if [ $? -ne 0 ]; then
            echo "Error: Failed to get variants from babel.yaml"
            echo "Content of babel.yaml-test:"
            cat ${{ matrix.image_path }}/babel.yaml-test
            exit 1
          fi
          
          # Initialize arrays for node info
          declare -a NODE_NAMES=()
          declare -a ERROR_NODES=()
          
          # Check if PR is from Renovate
          IS_RENOVATE=false
          if [[ "${{ github.event.pull_request.user.login }}" == "renovate[bot]" ]]; then
            IS_RENOVATE=true
            echo "PR is from Renovate, will use --cleanup and skip comments"
          fi
          
          # For each variant, start a node and capture info
          for variant in $VARIANTS; do
            echo "Testing variant: $variant"
            
            # Run nib image check with --cleanup for Renovate PRs
            if [[ "$IS_RENOVATE" == "true" ]]; then
              echo "Running: nib image check --variant $variant --path ${{ matrix.image_path }}/babel.yaml-test --cleanup jobs-status"
              nib image check --variant $variant --path ${{ matrix.image_path }}/babel.yaml-test --cleanup jobs-status 2>&1 | tee /tmp/nib_output.log
            else
              echo "Running: nib image check --variant $variant --path ${{ matrix.image_path }}/babel.yaml-test --cleanup jobs-restarts"
              nib image check --variant $variant --path ${{ matrix.image_path }}/babel.yaml-test --cleanup jobs-restarts 2>&1 | tee /tmp/nib_output.log
            fi
            
            # Extract node name from the complete output
            NODE_NAME=$(cat /tmp/nib_output.log | grep -o "'[^']*'" | head -1 | tr -d "'")
            if [ -z "$NODE_NAME" ]; then
              echo "Error: Failed to extract node name from output"
              exit 1
            fi
            
            # Store node name for cleanup
            NODE_NAMES+=("$NODE_NAME")
            
            # Check for errors in the output
            if grep -q "Error: " /tmp/nib_output.log; then
              ERROR_MSG=$(grep "Error: " /tmp/nib_output.log)
              echo "Error found in nib output for $NODE_NAME: $ERROR_MSG"
              ERROR_NODES+=("- \`${NODE_NAME}\`, running variant \`${variant}\`:"$'\n'"  \`\`\`"$'\n'"  $ERROR_MSG"$'\n'"  \`\`\`")
              
              # Check if error matches the job restart pattern
              if echo "$ERROR_MSG" | grep -q "Error: job '[^']*' has been restarted [0-9]* times"; then
                echo "Non-critical job restart detected. Continuing..."
              else
                echo "Critical error detected. Exiting..."
                exit 1
              fi
            fi
          done

          # Post comment based on results
          if [ ${#ERROR_NODES[@]} -gt 0 ]; then
            COMMENT="The following nodes have been deployed on \`${RUNNER_HOST}\` and return errors:"$'\n'
            for node in "${ERROR_NODES[@]}"; do
              COMMENT="${COMMENT}${node}"$'\n'
            done
            COMMENT="${COMMENT}"$'\n'"Please fix the underlying issues."
            echo -e "$COMMENT" | gh pr comment ${{ inputs.pr_number }} --body-file -
          else
            echo "All test nodes were deployed successfully and cleaned up." | gh pr comment ${{ inputs.pr_number }} --body-file -
          fi

          # Save node names for cleanup
          echo "node_names=${NODE_NAMES[*]}" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Update original babel.yaml
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HOME: /home/github-runner
        run: |
          # Fetch and checkout PR branch
          git remote set-url origin "https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git fetch origin
          git checkout -B pr-branch ${{ inputs.pr_sha }}
          
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Create a new branch from the PR's head ref
          git fetch origin ${{ github.event.pull_request.head.ref }}
          git checkout -B update-babel origin/${{ github.event.pull_request.head.ref }}
          
          # Update container_uri in the original babel.yaml
          yq -i e ".container_uri = \"${{ steps.test-babel.outputs.new_uri }}\"" ${{ matrix.image_path }}/babel.yaml
          
          # Commit and push changes
          git add "${{ matrix.image_path }}/babel.yaml"
          git commit -m "chore: update container_uri in ${{ matrix.image_path }}/babel.yaml to version ${{ matrix.version_tag }} [skip ci]"
          
          if ! git push origin update-babel:${{ github.event.pull_request.head.ref }}; then
            echo "Error: Failed to push changes"
            exit 1
          fi